name: Fetch Plugins and Filter NSFW

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  fetch-plugins:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install node-fetch
        run: npm install node-fetch@2

      - name: Fetch plugins, filter NSFW and add authors (INLINE)
        env:
          REPOS: 'owner1/repo1,owner2/repo2' # Buraya kaynak depoları owner/repo formatında virgülle ayırarak girin
        run: |
          node -e "
          const fetch = require('node-fetch');
          const fs = require('fs');
          const repos = process.env.REPOS
            ? process.env.REPOS.split(',').map(r => r.trim()).filter(Boolean)
            : [];
          if (repos.length === 0) {
            console.error('REPOS env değişkeni tanımlı değil veya boş.');
            process.exit(1);
          }
          (async () => {
            let merged = [];
            for (const repo of repos) {
              const [owner, name] = repo.split('/');
              if (!owner || !name) continue;
              const url = \`https://raw.githubusercontent.com/\${owner}/\${name}/main/plugins.json\`;
              try {
                const res = await fetch(url);
                if (!res.ok) {
                  console.warn(\`GET \${url} -> \${res.status} \${res.statusText}\`);
                  continue;
                }
                const plugins = await res.json();
                if (!Array.isArray(plugins)) {
                  console.warn(\`\${repo} -> plugins.json bulunamadı veya geçersiz.\`);
                  continue;
                }
                for (const plugin of plugins) {
                  if (Array.isArray(plugin.tvTypes) && plugin.tvTypes.includes('NSFW')) continue;
                  if (!plugin.authors) {
                    plugin.authors = [owner];
                  } else if (Array.isArray(plugin.authors)) {
                    if (!plugin.authors.includes(owner)) plugin.authors.push(owner);
                  } else if (typeof plugin.authors === 'string') {
                    if (plugin.authors !== owner) {
                      plugin.authors = [plugin.authors, owner];
                    } else {
                      plugin.authors = [owner];
                    }
                  }
                  merged.push(plugin);
                }
              } catch (e) {
                console.error(\`GET \${url} -> error: \${e.message}\`);
                continue;
              }
            }
            fs.writeFileSync('plugins-merged.json', JSON.stringify(merged, null, 2));
            console.log('plugins-merged.json oluşturuldu. Toplam plugin:', merged.length);
          })();
          "
